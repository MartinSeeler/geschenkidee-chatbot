import "server-only";

import {
  createAI,
  getMutableAIState,
  createStreamableValue,
  streamUI,
  createStreamableUI,
} from "ai/rsc";
import { CoreMessage, streamObject, streamText } from "ai";
import { format } from "date-fns";
import { de } from "date-fns/locale";

import { openai } from "@ai-sdk/openai";

import { BotMessage, SpinnerMessage, UserMessage } from "@/components/message";

import { z } from "zod";
import { AmazonSearchResultsSkeleton } from "@/components/chat/amazon-search-results-skeleton";
import { AmazonSearchResults } from "@/components/chat/amazon-search-results";
import { nanoid } from "@/lib/utils";
import { FakeResponse, search_items } from "@/lib/amazon/actions";
import { ReactNode } from "react";
import { SearchResultItem } from "paapi5-typescript-sdk";
import { headers } from "next/headers";

const quickAnswersModel = "gpt-3.5-turbo";
// const chatModel = "ft:gpt-3.5-turbo-0125:martin-seeler::9NG2I8g6"; // :ckpt-step-68
const chatModel = "gpt-3.5-turbo"; // :ckpt-step-68
// const chatModel = "gpt-4o"; // :ckpt-step-68

export interface ClientMessage {
  id: string;
  role: "user" | "assistant";
  display: ReactNode;
}

const itemToText = (item: SearchResultItem) => {
  const cost = item.Offers?.Listings[0].Price?.Amount.toFixed(2);
  const realCost = item.Offers?.Listings[0].Price?.Savings?.Amount
    ? (
        item.Offers?.Listings[0].Price?.Amount +
        item.Offers?.Listings[0].Price?.Savings.Amount
      ).toFixed(2)
    : item.Offers?.Listings[0].Price?.Amount.toFixed(2);

  return `${item.ItemInfo?.Title?.DisplayValue}
Marke: ${item.ItemInfo?.ByLineInfo?.Brand?.DisplayValue} | Preis: ${cost}‚Ç¨ ${
    realCost !== cost
      ? `(eigentlich ${realCost}‚Ç¨, also ${item.Offers?.Listings[0].Price?.Savings.Percentage}% gespart)`
      : ""
  }
Features:
${item.ItemInfo?.Features?.DisplayValues.join("\n")}
Technische Details: ${Object.values(item.ItemInfo?.ProductInfo ?? {})
    .filter((x) => x?.Label && x?.DisplayValue)
    .map((x) => x?.Label + " " + x?.DisplayValue)
    .join(", ")}
Abmessungen: ${Object.values(item.ItemInfo?.ProductInfo?.ItemDimensions ?? {})
    .map((x) => x?.Label + " " + x?.DisplayValue + " " + x?.Unit)
    .join(", ")}
`;
};

export type QuickAnswersResponse = {
  quickAnswers: string[];
};

export async function generateQuickAnswers(
  lastMessage: string
): Promise<{ object: QuickAnswersResponse }> {
  "use server";

  const stream = createStreamableValue();

  (async () => {
    const { partialObjectStream } = await streamObject({
      model: openai(quickAnswersModel),
      system: `Du bist Experte im Erstellen von Schnellantworten. Die Antworten beziehen sich immer auf den Text.

Wichtig ist, dass die Schnellantworten eine breite Auswahl an verschiedenen Optionen bieten, und nicht alle das gleiche bedeuten.
Also von Gef√§llt mir gut bis Gef√§llt mir nicht so gut, oder von Ja bis Nein usw. Nicht mehrere Schnellantworten, die positiv sind.

Beispiel:
Frage: Hallo! Das ist sch√∂n, dass du nach einem Geschenk f√ºr deine Mama suchst. üòä Um dir eine passende Geschenkidee vorzuschlagen, k√∂nntest du mir ein paar Informationen √ºber deine Mama geben? Hat sie besondere Hobbys oder Interessen? Gibt es etwas, das sie besonders gerne mag oder schon lange haben wollte? Jede kleine Info hilft, um das perfekte Geschenk zu finden! üéÅ‚ú®
Schnellantworten: ["Hobby-B√§ckerin", "Naschkatze", "Serien-Junki", "Blumenliebhaberin"]

Frage: Eine Hochzeit ist immer ein besonderer Anlass! Hast du schon eine Idee, was du dem gl√ºcklichen Paar schenken m√∂chtest, oder brauchst du noch Vorschl√§ge? üéÅüíçü•Ç
Schnellantworten: ["Etwas traditionelles", "Etwas kreatives", "Etwas preiswertes", "Ich habe keine Idee"]

Frage: Wie romantisch! üåπ Hier sind einige Vorschl√§ge f√ºr rote Rosen, die du f√ºr deine Frau kaufen kannst:

1. Dominik Blumen und Pflanzen, Blumenstrau√ü "Charlotte" mit rosa Lilien, Chrysantheme, Gerbera und Schleierkraut - Preis: 21,99 ‚Ç¨
2. Blumenstrau√ü Farbtraum, Bunter mit Rosen, Inkalilien und Statice, 7-Tage-Frischegarantie - Preis: 31,99 ‚Ç¨
3. BoriYa Muttertagsgeschenk Infinity Rosen im Glas Engel - Ewige Rose in Angel Glaskuppel mit LED Licht und Perlen - Preis: 18,99 ‚Ç¨
Welcher Vorschlag gef√§llt dir am besten oder soll ich noch nach etwas anderem suchen?
Schnellantworten: ["Charlotte","Farbtraum","Infinity Rosen","Etwas anderes"]

Frage: Ich bin GeschenkIdee.io und mein Spezialgebiet ist es, dir bei der Suche nach dem perfekten Geschenk zu helfen! Egal ob Geburtstage, Jubil√§en, Feiertage oder einfach nur so - ich bin hier, um kreative und individuelle Geschenkideen f√ºr deine Liebsten zu finden. Sag mir einfach, f√ºr wen du ein Geschenk suchst und lass uns loslegen! üéâ
Schnellantworten: ["Meine Frau", "Mein bester Freund", "Meine Oma", "Mein Chef"]

Frage: Das klingt nach einer sch√∂nen Geste! üòä Hat deine Frau bestimmte Lieblingsfarben, die ich bei der Geschenkauswahl ber√ºcksichtigen sollte?
Schnellantworten: ["Rot", "Blau", "Gr√ºn", "Gelb", "Rosa"]

Frage: Diese Karte ist perfekt, um deiner Frau zum Muttertag eine besondere Freude zu machen. Was h√§ltst du von dieser Idee?
Schnellantworten: ["Tolle Idee", "Nicht so meins", "Bin mir unsicher"]

Frage: Wie w√§re es mit einem 4er-Pack Basketball-Socken f√ºr Kinder in verschiedenen trendigen Farben? Sie sind atmungsaktiv, bequem und perfekt f√ºr sportliche Aktivit√§ten. Was denkst du dar√ºber?
Schnellantworten: ["Gef√§llt mir super!", "Geht so ...", "Finde ich langweilig!", "Gibt's das auch g√ºp√ºnstiger?"]

Frage: Hey, das ist gro√üartig! Wie alt wird dein bester Freund denn? üéâ
Schnellantworten: ["20", "30", "40", "50", "60"]
`,
      prompt:
        "Erstelle Schnellantworten f√ºr folgende Nachricht: " + lastMessage,
      schema: z.object({
        quickAnswers: z.array(
          z.string().describe("Eine Schnellantwort f√ºr den Nutzer")
        ),
      }),
    });

    for await (const partialObject of partialObjectStream) {
      stream.update(partialObject);
    }

    stream.done();
  })();

  // @ts-ignore
  return { object: stream.value };
}

async function submitUserMessage(content: string): Promise<ClientMessage> {
  "use server";

  const { get } = headers();
  const userAgent = get("User-Agent");
  const xForwardedFor = get("X-Forwarded-For");

  fetch("https://plausible.io/api/event", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "user-agent": userAgent ?? "",
      "x-forwarded-for": xForwardedFor ?? "",
    },
    body: JSON.stringify({
      name: "chat-message",
      url: "https://geschenkidee.io/chat",
      domain: "geschenkidee.io",
      props: {
        content,
      },
    }),
  });

  const aiState = getMutableAIState<typeof AI>();

  const uiStream = createStreamableUI(<SpinnerMessage />);

  // I want the string: "Heute ist Donnerstag, der 05. Mai 2024";
  const today = new Date();
  const formattedDate = format(today, "EEEE, 'der' dd. MMMM yyyy", {
    locale: de,
  });

  // const system_message: string = `Du bist GeschenkIdee.io, ein hilfreicher Assistent zum finden von Geschenken. Heute ist ${formattedDate}.`;
  const system_message: string = `Du bist GeschenkIdee.io. Du bist seit 20 Jahren Berater f√ºr Geschenkideen und wei√üt alles, was man √ºber das Thema schenken, Anl√§sse, Feiertage und Geschenke wissen muss. Deine Aufgabe ist es, den Nutzern dabei zu helfen, das perfekte Geschenk f√ºr ihre Liebsten zu finden. 
  Du wurdest von [Martin Seeler](https://www.linkedin.com/in/martinseeler/) aus Dresden, einem AI Entwickler, erstellt.
Du bist freundlich, kreativ und immer hilfsbereit. Deine Antworten sind immer auf den Punkt und du gibst immer nur einen Vorschlag auf einmal.
Dein Ziel ist es, dass der Nutzer ein Geschenk auf Amazon kauft.
Du sprichst immer deutsch und bist immer freundlich und dezent lustig, aber nicht zu aufdringlich.
Du weichst niemals von deiner eigentlich Aufgabe ab und verweigerst jegliche andere Aufgaben.
Du generierst immer einen konkreten Geschenkvorschlag in jeder Antwort und verfeinerst die Geschenkidee, wenn der Nutzer nicht zufrieden ist.
Du arbeitest dich mit cleveren und gezielten Fragen zum perfekten Geschenk.
Du ferfindest keine Geschenkideen, die nicht auf Amazon erh√§ltlich sind.
Du bist nicht selbst in der Lage, Links f√ºr Amazon Produkte zu generieren, aber du kannst ihm Produkte √ºber die Funktion 'searchAmazon' suchen und dem Kunden zeigen.
Du bist nicht f√ºrs bestellen oder kaufen von Produkten zust√§ndig. Das macht der Kunde, wenn er auf Amazon ist.
Du antwortest immer auf deutsch.
Wenn der Nutzer nicht zufrieden ist, denke kreativ was Sinn machen k√∂nnte und generiere neue Produktvorschl√§ge durch die Funktion 'searchAmazon'.

Zus√§tzlich zu deinen Grundfunktionen bist du ein Meister der Kreativit√§t und Individualit√§t. Du beginnst deine Interaktion mit Fragen, die tiefer in die Vorlieben und den Lebensstil der beschenkten Person eintauchen. Du fragst beispielsweise nach Hobbys, Lieblingsfarben, bevorzugtem Stil oder besonderen Erinnerungen, die mit der Person verbunden sind.
Dein Ansatz ist es, Geschenkideen vorzuschlagen, die eine pers√∂nliche Note haben und vielleicht sogar eine Geschichte erz√§hlen oder eine besondere Bedeutung f√ºr die beschenkte Person haben k√∂nnten.
Du bist geschult darin, versteckte Hinweise aus den Antworten des Nutzers zu entdecken und diese in innovative Geschenkideen umzusetzen, die oft √ºber das Offensichtliche hinausgehen.

Einem Fu√üballfan w√ºrdest du bspw. niemals einen Fu√üball vorschlagen, sondern fragst nach dem Verein und den Lieblingsspielern, um ein personalisiertes Trikot oder Merch des Lieblingsvereins vorzuschlagen.
Einem Fahrradfahrer w√ºrdest du nicht einfach ein Fahrrad vorschlagen, sondern fragst nach dem bevorzugten Gel√§nde und kommst mit kreativen Ideen wie einem Trinkblasenrucksack oder einem Gutschein f√ºr eine Fahrradreparatur.
Wenn jemand gern kocht, hat er auch schon Kochgeschirr und Kochb√ºcher. Du fragst nach dem Lieblingsgericht und schl√§gst lieber ausgefallene Gew√ºrze oder ein Messer mit Gravur vor.

Statt zu fragen, ob du nach etwas suchen sollst, rufst du zuerst die Funktion 'searchAmazon' auf und zeigst dem Nutzer eine Auswahl an Produkten, die zu den bisherigen Antworten passen. Danach erkl√§rst du, was du dir dabei gedacht hast und fragst die n√§chste Frage, um die Suche zu verfeinern.
Du fragst nach konkreten Infos. Keine Frage wie "Wie kann ich helfen?" sondern "Wen wollen wir beschenken?", "Um welchen Anlass geht's?" oder "Was sind die Lieblingsfarben?".

Wenn der Nutzer zufrieden ist oder sagt, das er etwas nimmt, nutze die Funktion 'searchAmazon' und suche nach passenden Accessoires, Geschenkpapier oder Gru√ükarten und animiere den Nutzer, diese ebenfalls zu kaufen.

Hier ein paar Beispiele f√ºr deinen Sprachstil:
Nutzer: Ich suche ein Geschenk f√ºr meinen Sohn zum 10. Geburtstag.
Assistent: Wie, der kleine wird schon 10? Da muss ein ganz besonderes Geschenk her! Hat er denn Hobbies, au√üer zocken? üòÖ

Nutzer: Ich suche was ganz besonderes f√ºr meine Frau zur Hochzeit.
Assistent: {\"query\": \"dyson airwrap\"}
Assistent: Ergebnisse:\nDyson Airwrap Complete Verschiedene Haartypen und Styles, Fuchsia vollst√§ndig, Normale Gr√∂√üe, 310731-01\nMarke: Dyson | Preis: 688.50‚Ç¨ ...
Assistent: Herzlichen Gl√ºckwunsch zu eurer Hochzeit! üòä So ein besonderer Tag braucht nat√ºrlich auch ein besonderes Geschenk!\n\nIch wei√ü auch schon was, n√§mlich einen **Dyson Airwrap**! Den gibt es aktuell f√ºr 688.50‚Ç¨ in Fuchsia. Es gibt zwar auch Alternativen von anderen Herstellern, wie z.B. den **5-in-1 Air Styler & Haartrockner** von Shark FlexStyle als Limited Edition f√ºr 225.99‚Ç¨, aber ich w√ºrde dir auf jeden Fall zum **Original von Dyson** raten! Deine zuk√ºnftige Frau wird noch lange √ºber dieses tolle Geschenk reden, das verspreche ich dir!\n\nWas ist denn der preisliche Rahmen, den du dir vorgestellt hast?

Nutzer: Wie finde ich ein passendes Geschenk f√ºr meine Frau?
Assistent: Das klappt am besten √ºber das **Ausschlussverfahren**. Wir finden erst alles raus, was wir ihr **nicht** schenken, und was am Ende √ºbrig bleibt, wird schon passen.\n\nIn England lebt z.B. ein Mann der Bleistiftanspitzer in die Hinterteile ausgestopfter Ratten einbaut. Ich empfehle dir **NICHTS** bei diesem Typen f√ºr deine Frau zu bestellen! Auch nichts von all den seltsamen Sachen, die er sonst noch verkauft. Auch nicht den Toaster in einem ausgestopften Hasen.\n\nSiehst du? Wir n√§hern uns! Was mag deine Frau denn so gar nicht?

Nutzer: Ich suche ein geschenk f√ºr meine Freundin.
Assistent: {\"query\": \"liebevolle botschaften f√ºr jeden tag\"}
Assistent: Ergebnisse:\nKeine ist wie du und das ist deine St√§rke: Liebevolle Botschaften f√ºr jeden Tag...
Assistent: Ich wei√ü noch nichts √ºber deine Freundin, aber **liebevolle Botschaften** sind doch eine gute Idee, oder? Ich habe hier eine **Kartenbox mit 50 K√§rtchen** oder auch **Gl√ºcksmantras f√ºr Alltagsheldinnen**. Die gehen ab 6‚Ç¨ los, also ein echter Schnapper!\n\nZu welchem Anlass m√∂chtest du ihr denn etwas schenken?

Nutzer: Was ist dein Lieblingsbuch?
Assistent: {\"query\": \"bestseller 2024\"}
Assistent: Ergebnisse:\nDer Buchspazierer: Roman | Der ber√ºhrende Bestseller, f√ºr alle, die B√ºcher lieben...
Assistent: Also ich pers√∂nlich kann ja gar nicht lesen. Aber es scheint, als ob **Der Buchspazierer** ein sehr beliebtes Buch ist. Wenn du mehr auf Liebesgeschichten stehst, k√∂nnte **F√ºnf Sommer mit dir** auch interessant sein. Oder wie w√§re es mit einem Psychothriller wie **Das B√∂se in ihr**? Oder doch lieber **Unser Tag ist heute**?\n\nWelches Genre suchst du denn konkret?

Nutzer: Meine Freundin hat gerade das Skifahren f√ºr sich entdeckt. Was kann ich ihr schenken?
Assistent: {\"query\": \"sonnenschutz wintersport\"}
Assistent: Ergebnisse:\nPiz Buin Mountain Sun Cream, Sonnencreme, Sonnenschutz Wintersport...
Assistent: Wie w√§re es mit einer Sonnencreme speziell f√ºr den Wintersport? Die bietet besonderen Schutz vor der Sonne, die durch den Schnee stark reflektiert wird. Und zus√§tzlich wirkt sie gegen die K√§lte und den Wind, der auf dem Berg und bei der Abfahrt ins Gesicht weht.\nEs gibt verschiedene Produkte von der Marke **Piz Buin**. Die **Mountain Sun Cream** gibt es mit **LSF 50+** f√ºr 7.99‚Ç¨ oder mit **LSF 30** f√ºr 6.99‚Ç¨. F√ºr die Lippen gibt es auch einen **Lippenpflegestift** mit LSF 30 f√ºr 3.99‚Ç¨ oder eine Kombination aus Sonnencreme und Lippenpflege f√ºr 9.00‚Ç¨.\nWie viel m√∂chtest du denn ausgeben?
Nutzer: Toller Tip! Ein bisschen teurer kann es schon sein.
Assistent: {\"query\": \"schlauchschal merinowolle damen\", \"maxPrice\": 30}
Assistent: Ergebnisse:\nBuff Merino Lightweight Multifunktionstuch Solid Black Unisex Erwachsene...
Assistent: Wie w√§re es mit einem Schlauchschal aus Merinowolle? Die sind besonders weich und w√§rmen gut. Au√üerdem sind sie atmungsaktiv und regulieren die Temperatur. Das ist besonders praktisch beim Skifahren! Es gibt verschiedene Modelle von der Marke **Buff** oder **P.A.C.** in diversen Farben.\nWas ist denn die Lieblingsfarbe deiner Freundin?
Nutzer: Sie hat keine Lieblingsfarbe
Assistent: Kein Problem, wir finden schon was passendes. Statistisch gesehen sind **schwarz** und **blau** die beliebtesten Farben bei Frauen, was Kleidung angeht. Daher w√ºrde ich dir zu dem **Buff Merino Lightweight Multifunktionstuch** in **Solid Black** f√ºr 17.95‚Ç¨ oder dem **Solid Pool** f√ºr 28.91‚Ç¨ raten.\nEtwas mutiger, aber auch sinnvoller, w√§re ein Schlauchschal in **rot** oder **pink**. Das h√§tte den Vorteil, dass sie auf der Piste oder im schlimmsten Fall nach einem Sturz besser gesehen wird.\n\nWillst du eher auf Nummer sicher gehen oder etwas auff√§lligeres schenken?


---
Wichtig: Jeder Text von dir endet mit einer konkreten, spezifischen Frage, um die Suche zu verfeinern. Es soll eine Information abgefragt werden, nicht mehrere. Frage **nicht** nach Farbe UND Hobbies, sondern ENTWEDER nach Farbe, ODER nach Hobbies!
Du fragst auf gar keinen Fall, welches Produkt dem Nutzer besser gef√§llt, sondrn immer eine konkrete Frage zur beschenkenden Person, die die Suche verfeinert.
Auch fragst dua fu keinen Fall, wie die Idee gef√§llt, sondern immer eine konkrete Frage zur beschenkenden Person, die die Suche verfeinert.
`;

  aiState.update({
    ...aiState.get(),
    messages: [
      ...aiState.get().messages,
      {
        role: "user" as const,
        content,
      },
    ],
  });

  let functionCalled = false;

  await streamUI({
    model: openai(chatModel),
    temperature: 0.3,
    maxTokens: 300,
    system: system_message,
    messages: [
      ...aiState.get().messages,
      {
        role: "user",
        content,
      },
    ],
    text: ({ content, done }) => {
      if (done) {
        aiState.done({
          ...aiState.get(),
          messages: [...aiState.get().messages, { role: "assistant", content }],
        });
        uiStream.done(<BotMessage content={content} />);
      } else {
        uiStream.update(<BotMessage content={content} />);
      }
      return uiStream.value;
    },
    tools: {
      searchAmazon: {
        description: "Produkte auf Amazon.de suchen",
        parameters: z.object({
          query: z.string().describe("Der Suchbegriff"),
          page: z
            .number()
            .optional()
            .describe(
              "Die Seite der Suchergebnisse, die zur√ºckgegeben werden soll."
            ),
          maxPrice: z
            .number()
            .optional()
            .describe(
              "Der maximale Preis, den das Produkt haben darf. Bspw 50.00 f√ºr 50‚Ç¨"
            ),
        }),
        generate: async function* ({ query, page, maxPrice }) {
          console.log("searchAmazon", { query, page, maxPrice });
          if (functionCalled) {
            return uiStream.value;
          } else {
            functionCalled = true;
          }
          uiStream.update(<AmazonSearchResultsSkeleton query={query} />);

          const amazonResults = await search_items(query, page, maxPrice);

          uiStream.update(
            <>
              <AmazonSearchResults
                results={amazonResults} // .slice(0, 8)
                query={query}
              />
              <SpinnerMessage />
            </>
          );

          const itemsContent =
            "Ergebnisse:\n" +
            amazonResults.SearchResult?.Items.map(itemToText).join("------\n");

          const assistantMessage: CoreMessage = {
            role: "assistant",
            content: itemsContent,
          };

          // console.log(
          //   "assistantMessage",
          //   JSON.stringify(assistantMessage, null, 2)
          // );

          aiState.update({
            ...aiState.get(),
            messages: [
              ...aiState.get().messages,
              {
                role: "assistant",
                content: "",
                // @ts-ignore
                function_call: {
                  name: "searchAmazon",
                  arguments: JSON.stringify({ query, page, maxPrice }),
                },
              },
              // @ts-ignore
              assistantMessage,
            ],
          });
          const responseStream = createStreamableValue("");
          uiStream.update(
            <>
              <AmazonSearchResults results={amazonResults} query={query} />
              <BotMessage content={responseStream.value} />
            </>
          );
          let assistentContent = "";
          (async () => {
            const { textStream } = await streamText({
              model: openai(chatModel),
              system: system_message,
              temperature: 0.5,
              maxTokens: 500,
              messages: aiState.get().messages as CoreMessage[],
            });

            const reader = textStream.getReader();

            while (true) {
              const { done, value } = await reader.read();
              if (done) {
                responseStream.done();
                uiStream.done(
                  <>
                    <AmazonSearchResults
                      results={amazonResults}
                      query={query}
                    />
                    <BotMessage content={assistentContent} />
                  </>
                );
                break;
              } else {
                assistentContent += value;
                responseStream.update(value);
              }
            }

            aiState.done({
              ...aiState.get(),
              messages: [
                ...aiState.get().messages,
                {
                  role: "assistant",
                  content: assistentContent,
                },
              ],
            });
          })();

          return uiStream.value;
        },
      },
    },
  });

  return {
    id: nanoid(),
    role: "assistant",
    display: uiStream.value,
  };
}

export type AIState = {
  chatId: string;
  messages: CoreMessage[];
};

export type UIState = ClientMessage[];

export const AI = createAI<AIState, UIState>({
  actions: {
    submitUserMessage,
    generateQuickAnswers,
  },
  initialUIState: [
    // {
    //   id: nanoid(),
    //   role: "assistant",
    //   display: (
    //     <BotMessage content="Hallo! Ich bin GeschenkIdee.io, dein pers√∂nlicher Geschenkberater. Wie kann ich dir helfen?" />
    //   ),
    // },
    // {
    //   id: nanoid(),
    //   role: "user",
    //   display: (
    //     <UserMessage>
    //       Ich suche ein Geschenk f√ºr meine Frau zum Muttertag.
    //     </UserMessage>
    //   ),
    // },
    // {
    //   id: nanoid(),
    //   role: "assistant",
    //   display: <SpinnerMessage />,
    // },
    // {
    //   id: nanoid(),
    //   role: "assistant",
    //   display: <AmazonSearchResultsSkeleton query="rote Blumen" />,
    // },
    // {
    //   id: nanoid(),
    //   role: "assistant",
    //   display: (
    //     <>
    //       <AmazonSearchResults
    //         results={FakeResponse}
    //         query="Blumen Muttertag"
    //       />
    //       <BotMessage content="Wie w√§re es mit ein paar sch√∂nen Blumen f√ºr deine Frau zum Muttertag?" />
    //     </>
    //   ),
    // },
    // {
    //   id: nanoid(),
    //   role: "assistant",
    //   display: (
    //     <BotMessage content="Hier sind einige Vorschl√§ge f√ºr rote Rosen, die du f√ºr deine Frau kaufen kannst:" />
    //   ),
    // },
  ],
  initialAIState: { chatId: nanoid(), messages: [] },
});
